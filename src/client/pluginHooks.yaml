# # Plugin API
#
# Client-side plugins can provide the following hooks to interact with brickify.
#
# The hooks must exist at load-time. Hooks that are added later during
# run-time will not be called.
#
# See [dummyPlugin](plugins/dummy/dummy.html) for an example implementation
# and further documentation of the plugin API.

# ## Plugin Initialization
# The [pluginLoader](pluginLoader.html) will call each plugin's `init` method
# (if provided) after loading the plugin. It is the first method to be called
# and provides access to the [Bundle](bundle.html).

- init

# ## 3D scene initialization
#
# Each plugin that provides a `init3d` method is able to initialize its 3D
# rendering there and receives a three.js node as argument.
#
# If the plugin needs its node for later use it has to store it in `init3d`
# because it won't be handed the node again later.

- init3d

# ## 3D scene update and animation
#
# On each render frame the [renderer](render.html) will call the `on3dUpdate`
# method of all plugins that provide it.
#
# The callback has two arguments:
# First, a DOMHighResTimeStamp which indicates
# the current time for when requestAnimationFrame starts to fire callbacks.
# (according to
# https://developer.mozilla.org/en/docs/Web/API/window.requestAnimationFrame)
# Second, a number in milliseconds indicating the time it took to render the
# last frame.

- on3dUpdate

# ## onPaint
#
# Plugins that need visuals beyond a node in a default scene (-> init3d) may
# perform their custom render pass in this call.

- onPaint

# ## setFidelity
#
# Plugins should adapt their visual fidelity to match the device's rendering power.
# When the framerate is above / below a certain threshold, setFidelity is called

- setFidelity

# ## scene interaction and administration

# ### New nodes
#
# Each time a new node is added to the scene, the sceneManager will inform
# plugins by calling onNodeAdd

- onNodeAdd

# ### Node selection
#
# Each time a scene's node is selected, the sceneManager will inform plugins by
# calling onNodeSelect

- onNodeSelect

# ### Node deselection
#
# Each time a scene's node is deselected, the sceneManager will inform plugins
# by calling onNodeDeselect

- onNodeDeselect

# ### Node deletion
#
# When a node is removed from the scene, the sceneManager will inform plugins
# by calling onNodeRemove

- onNodeRemove

# ## Hotkeys
#
# Plugins should return an object with a title property (String) that is
# displayed in the help and an array of events. Each event is an object with a
# *hotkey* (String) according to
# [Mousetrap]{https://github.com/ccampbell/mousetrap},
# a *description* (String) that is shown in the help dialog and a *callback*
# function that is called when the hotkey is pressed.

- getHotkeys

# ## Brushes
#
# Plugins may return an array with an entry for each brush they provide
# each brush should have the json structure like in this example:
#
# {
#	text: 'Make Lego'
#	onBrushSelect: # when the brush is selected, selectedNode as argument
#	onBrushDeselect: # when the brush is deselected
#	onBrushDown: # when a node is selected and mouse is pressed
#	onBrushMove: # after being pressed, when mouse is moved
#	onBrushOver: # when the mouse is moved, but not pressed
#	onBrushUp: # when mouse is released
#	onBrushCancel: # when interaction is canceled (ESC, two buttons pressed)
# }
#

- getBrushes

# ## onPointerEvent
# When the user interacts with the application, plugins may react to pointerEvents.
# They should return true, if they handled this event, and false, if they did not.
# If no plugin handled the event, three pointer controls will handle it.

- onPointerEvent

# ## getDownload
# (parameters: see example plugin)
# If plugins can provide something downloadable to the user, they should return
# either a single object {filename: String (not null) data: Blob} or an array of such objects.
# It may also return a promise that resolves to one of the above.
# Download objects with an empty filename are ignored.

- getDownload
